import random
import numpy as np
import copy
import matplotlib.pyplot as plt

D_racks = np.array([
    [0,36.55,58.15,92.4,92.35,94.85,92.45,89.2,90.05,92.55,86.7,87.65,90.15,84.2,82.75,85.25,87.75,81.7,80.35,85.35,77.95,80.45,82.95,75.55,78.05,80.55,74.2,73.15,78.15,73.25,69.2,68.35,70.85,73.35],
    [36.55,0,24.55,58.8,58.75,61.25,58.85,56.7,56.45,58.95,54.2,54.05,56.55,51.7,49.15,51.65,54.15,49.2,46.75,51.75,44.35,46.85,49.35,41.95,44.45,46.95,41.7,39.55,44.55,39.65,36.7,34.75,37.25,39.75],
    [58.15,24.55,0,37.2,37.15,39.65,37.25,36.7,34.85,37.35,34.2,32.45,34.95,31.7,27.55,30.05,32.55,29.2,25.15,30.15,22.75,25.25,27.75,20.35,22.85,25.35,21.7,17.95,22.95,18.05,16.7,13.15,15.65,18.15],
    [92.4,58.8,37.2,0,6,8.5,9.125,15.5,10.65,13.15,18,12.6,15.1,20.5,12.2,14.7,17.2,23,18,23,20.4,22.9,25.4,22.8,25.3,27.8,30.5,25.2,30.2,30.1,35.5,30,32.5,35],
    [92.35,58.75,37.15,6,0,1.7,7.85,8.7,10.25,12.75,11.2,12.65,15.15,13.7,12.55,15.05,17.55,16.2,14.95,19.95,17.35,19.85,22.35,19.75,22.25,24.75,23.7,22.15,27.15,27.05,28.7,26.95,29.45,31.95],
    [94.85,61.25,39.65,8.5,1.7,0,10.35,6.2,12.75,10.25,8.7,15.15,12.65,11.2,15.05,17.55,15.05,13.7,17.45,17.45,19.85,22.35,19.85,22.25,24.75,22.25,21.2,24.65,24.65,29.55,26.2,29.45,31.95,29.45],
    [92.45,58.85,37.25,9.125,7.85,10.35,0,5.45,10.35,7.85,6.2,12.75,10.25,8.7,12.65,15.15,12.65,11.2,15.05,15.05,17.45,19.95,17.45,19.85,22.35,19.85,18.7,22.25,22.25,27.15,23.7,27.05,29.55,27.05],
    [89.2,56.7,36.7,15.5,8.7,6.2,5.45,0,6.2,3.7,1.7,8.7,6.2,4.2,13.7,11.2,8.7,6.7,16.2,11.2,18.7,16.2,13.7,21.2,18.7,16.2,14.2,23.7,18.7,23.7,19.2,28.7,26.2,23.7],
    [90.05,56.45,34.85,10.65,10.25,12.75,10.35,6.2,0,1.7,5.45,10.35,7.85,6.2,10.25,12.75,10.25,8.7,12.65,12.65,15.05,17.55,15.05,17.45,19.95,17.45,16.2,19.85,19.85,24.75,21.2,24.65,27.15,24.65],
    [92.55,58.95,37.35,13.15,12.75,10.25,7.85,3.7,1.7,0,2.95,7.85,5.35,3.7,12.75,10.25,7.75,6.2,15.15,10.15,17.55,15.05,12.55,19.95,17.45,14.95,13.7,22.35,17.35,22.25,18.7,27.15,24.65,22.15],
    [86.7,54.2,34.2,18,11.2,8.7,6.2,1.7,5.45,2.95,0,6.2,3.7,1.7,11.2,8.7,6.2,4.2,13.7,8.7,16.2,13.7,11.2,18.7,16.2,13.7,11.7,21.2,16.2,21.2,16.7,26.2,23.7,21.2],
    [87.65,54.05,32.45,12.6,12.65,15.15,12.75,8.7,10.35,7.85,6.2,0,1.7,5.45,7.85,10.35,7.85,6.2,10.25,10.25,12.65,15.15,12.65,15.05,17.55,15.05,13.7,17.45,17.45,22.35,18.7,22.25,24.75,22.25],
    [90.15,56.55,34.95,15.1,15.15,12.65,10.25,6.2,7.85,5.35,3.7,1.7,0,2.95,10.35,7.85,5.35,3.7,12.75,7.75,15.15,12.65,10.15,17.55,15.05,12.55,11.2,19.95,14.95,19.85,16.2,24.75,22.25,19.75],
    [84.2,51.7,31.7,20.5,13.7,11.2,8.7,4.2,6.2,3.7,1.7,5.45,2.95,0,8.7,6.2,3.7,1.7,11.2,6.2,13.7,11.2,8.7,16.2,13.7,11.2,9.2,18.7,13.7,18.7,14.2,23.7,21.2,18.7],
    [82.75,49.15,27.55,12.2,12.55,15.05,12.65,13.7,10.25,12.75,11.2,7.85,10.35,8.7,0,1.7,4.2,7.95,5.35,10.35,7.75,10.25,12.75,10.15,12.65,15.15,13.7,12.55,17.55,17.45,18.7,17.35,19.85,22.35],
    [85.25,51.65,30.05,14.7,15.05,17.55,15.15,11.2,12.75,10.25,8.7,10.35,7.85,6.2,1.7,0,1.7,5.45,7.85,7.85,10.25,12.75,10.25,12.65,15.15,12.65,11.2,15.05,15.05,19.95,16.2,19.85,22.35,19.85],
    [87.75,54.15,32.55,17.2,17.55,15.05,12.65,8.7,10.25,7.75,6.2,7.85,5.35,3.7,4.2,1.7,0,2.95,10.35,5.35,12.75,10.25,7.75,15.15,12.65,10.15,8.7,17.55,12.55,17.45,13.7,22.35,19.85,17.35],
    [81.7,49.2,29.2,23,16.2,13.7,11.2,6.7,8.7,6.2,4.2,6.2,3.7,1.7,7.95,5.45,2.95,0,8.7,3.7,11.2,8.7,6.2,13.7,11.2,8.7,6.7,16.2,11.2,16.2,11.7,21.2,18.7,16.2],
    [80.35,46.75,25.15,18,14.95,17.45,15.05,16.2,12.65,15.15,13.7,10.25,12.75,11.2,5.35,7.85,10.35,8.7,0,4.2,5.35,7.85,10.35,7.75,10.25,12.75,11.2,10.15,15.15,15.05,16.2,14.95,17.45,19.95],
    [85.35,51.75,30.15,23,19.95,17.45,15.05,11.2,12.65,10.15,8.7,10.25,7.75,6.2,10.35,7.85,5.35,3.7,4.2,0,10.35,7.85,5.35,12.75,10.25,7.75,6.2,15.15,10.15,15.05,11.2,19.95,17.45,14.95],
    [77.95,44.35,22.75,20.4,17.35,19.85,17.45,18.7,15.05,17.55,16.2,12.65,15.15,13.7,7.75,10.25,12.75,11.2,5.35,10.35,0,1.7,4.2,5.35,7.85,10.35,8.7,7.75,12.75,12.65,13.7,12.55,15.05,17.55],
    [80.45,46.85,25.25,22.9,19.85,22.35,19.95,16.2,17.55,15.05,13.7,15.15,12.65,11.2,10.25,12.75,10.25,8.7,7.85,7.85,1.7,0,1.7,7.85,10.35,7.85,6.2,10.25,10.25,15.15,11.2,15.05,17.55,15.05],
    [82.95,49.35,27.75,25.4,22.35,19.85,17.45,13.7,15.05,12.55,11.2,12.65,10.15,8.7,12.75,10.25,7.75,6.2,10.35,5.35,4.2,1.7,0,10.35,7.85,5.35,3.7,12.75,7.75,12.65,8.7,17.55,15.05,12.55],
    [75.55,41.95,20.35,22.8,19.75,22.25,19.85,21.2,17.45,19.95,18.7,15.05,17.55,16.2,10.15,12.65,15.15,13.7,7.75,12.75,5.35,7.85,10.35,0,1.7,4.2,7.95,5.35,10.35,10.25,11.2,10.15,12.65,15.15],
    [78.05,44.45,22.85,25.3,22.25,24.75,22.35,18.7,19.95,17.45,16.2,17.55,15.05,13.7,12.65,15.15,12.65,11.2,10.25,10.25,7.85,10.35,7.85,1.7,0,1.7,5.45,7.85,7.85,12.75,8.7,12.65,15.15,12.65],
    [80.55,46.95,25.35,27.8,24.75,22.25,19.85,16.2,17.45,14.95,13.7,15.05,12.55,11.2,15.15,12.65,10.15,8.7,12.75,7.75,10.35,7.85,5.35,4.2,1.7,0,2.95,10.35,5.35,10.25,6.2,15.15,12.65,10.15],
    [74.2,41.7,21.7,30.5,23.7,21.2,18.7,14.2,16.2,13.7,11.7,13.7,11.2,9.2,13.7,11.2,8.7,6.7,11.2,6.2,8.7,6.2,3.7,7.95,5.45,2.95,0,8.7,3.7,8.7,4.2,13.7,11.2,8.7],
    [73.15,39.55,17.95,25.2,22.15,24.65,22.25,23.7,19.85,22.35,21.2,17.45,19.95,18.7,12.55,15.05,17.55,16.2,10.15,15.15,7.75,10.25,12.75,5.35,7.85,10.35,8.7,0,4.2,4.1,8.7,7.75,10.25,12.75],
    [78.15,44.55,22.95,30.2,27.15,24.65,22.25,18.7,19.85,17.35,16.2,17.45,14.95,13.7,17.55,15.05,12.55,11.2,15.15,10.15,12.75,10.25,7.75,10.35,7.85,5.35,3.7,4.2,0,4.1,3.7,12.75,10.25,7.75],
    [73.25,39.65,18.05,30.1,27.05,29.55,27.15,23.7,24.75,22.25,21.2,22.35,19.85,18.7,17.45,19.95,17.45,16.2,15.05,15.05,12.65,15.15,12.65,10.25,12.75,10.25,8.7,4.1,4.1,0,5.45,7.85,10.35,7.85],
    [69.2,36.7,16.7,35.5,28.7,26.2,23.7,19.2,21.2,18.7,16.7,18.7,16.2,14.2,18.7,16.2,13.7,11.7,16.2,11.2,13.7,11.2,8.7,11.2,8.7,6.2,4.2,8.7,3.7,5.45,0,8.7,6.2,3.7],
    [68.35,34.75,13.15,30,26.95,29.45,27.05,28.7,24.65,27.15,26.2,22.25,24.75,23.7,17.35,19.85,22.35,21.2,14.95,19.95,12.55,15.05,17.55,10.15,12.65,15.15,13.7,7.75,12.75,7.85,8.7,0,1.7,4.2],
    [70.85,37.25,15.65,32.5,29.45,31.95,29.55,26.2,27.15,24.65,23.7,24.75,22.25,21.2,19.85,22.35,19.85,18.7,17.45,17.45,15.05,17.55,15.05,12.65,15.15,12.65,11.2,10.25,10.25,10.35,6.2,1.7,0,1.7],
    [73.35,39.75,18.15,35,31.95,29.45,27.05,23.7,24.65,22.15,21.2,22.25,19.75,18.7,22.35,19.85,17.35,16.2,19.95,14.95,17.55,15.05,12.55,15.15,12.65,10.15,8.7,12.75,7.75,7.85,3.7,4.2,1.7,0]
])

# Matriz D: supongamos 11 SKUs (1..11) y 3 pedidos (p=0,1,2). Ajusta según tu D real.
# Filas: SKU index starting in 1 (o 0 si prefieres). Aquí usaremos 1-based SKU numbers in slot_assignments.
D = np.array([
    [6,5,4,1,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #Pedido 1
    [0,0,0,0,0,0,0,7,6,2,1,4,4,5,3,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,6,7,3,3,2,7,2,7,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,7,7,1,2,2,3,7,2,7,3,4],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,2,0,0,4,0,0,0,0,6,0,0,0,0,0,0],
    [0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,2,0,0,5,0,7,0,0,0,3],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,3,6,3,0,2,0,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,7,5,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,5,4,0,7,0,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,3,1,0,1,3,6,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,2,0,0,0,5,0,7,0,4,6,0,0,0,0,1,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3] #Pedido 15  # sku11 (si existe)
], dtype=int)

Sr = np.array([
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,]
])

VU_array = np.array([
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.077,
    0.077,
    0.0385,
    0.077,
    0.0385,
    0.077,
    0.077,
    0.0385,
    0.0385,
    0.077,
    0.0385,
    0.0476190476190476,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.14,
    0.28,
    0.14,
    0.0385,
    0.0385,
    0.0476190476190476,
    0.0476190476190476,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0385,
    0.0385,
    0.0385,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.077,
    0.0952380952380952,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0476190476190476,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.14,
    0.14,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0476190476190476,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.14,
    0.14,
    0.14,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.077,
    0.077,
    0.1538,
    0.1538,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0385,
    0.0385,
    0.0385,
    0.0476190476190476,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0385,
    0.14,
    0.14,
    0.0769,
    0.0769,
    0.0769,
    0.1538,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0476190476190476,
    0.0476190476190476,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.14,
    0.14,
    0.14,
    0.1155,
    0.1155,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.0769,
    0.1538,
    0.1538,
    0.0769,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.2307,
    0.2307,
    0.2307,
    0.2307,
    0.2307,
    0.2307,
    0.2307,
    0.2307,
    0.1538,
    0.2307,
    0.2307,
    0.1538,
    0.2307,
    0.2307,
    0.2307,
    0.2307,
    0.0769,
    0.0385,
    0.28,
    0.28,
    0.28,
    0.077,
    0.077,
    0.0769,
    0.0385,
    0.28,
    0.0385,
    0.0769,
    0.0769,
    0.0769,
    0.1538,
    0.1538,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0385,
    0.0769,
    0.0385,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.1538,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.1538,
    0.0769,
    0.0769,
    0.1538,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.1538,
    0.1538,
    0.1538,
    0.0769,
    0.0769,
    0.0769,
    0.1538,
    0.1538,
    0.1538,
    0.0385,
    0.0385,
    0.0476190476190476,
    0.0476190476190476,
    0.0476190476190476,
    0.0476190476190476,
    0.0476190476190476,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.077,
    0.077,
    0.14,
    0.14,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.0769,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0385,
    0.0476190476190476,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.0769,
    0.14,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.1538,
    0.0769,
    0.0769,
    0.6152,
    0.6152,
    0.6152], dtype= float)

# slot_assignments: pega aquí los vectores que nos diste
slot_assignment = [
np.array([0, 0, 0, 0, 31, 33, 28, 0, 8, 37, 22, 25, 18, 3, 1, 1, 38, 38, 38, 4, 38, 21, 21, 21, 38, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 11, 35, 36, 29, 13, 41, 41, 34, 0, 0, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 28, 19, 8, 37, 22, 25, 18, 3, 1, 1, 38, 38, 38, 4, 38, 21, 21, 21, 38, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 28, 19, 8, 37, 22, 25, 18, 3, 1, 1, 38, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 28, 19, 8, 37, 22, 25, 18, 3, 1, 1, 21, 38, 38, 38, 38, 38, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 28, 19, 8, 37, 22, 25, 18, 3, 1, 1, 21, 38, 38, 38, 38, 38, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 28, 19, 8, 37, 22, 25, 18, 3, 1, 1, 21, 38, 38, 38, 38, 38, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 19, 28, 8, 37, 22, 25, 18, 3, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 38, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 8, 28, 19, 37, 22, 25, 18, 3, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 38, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 8, 28, 19, 37, 22, 25, 18, 3, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 38, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 28, 19, 33, 8, 37, 22, 25, 18, 38, 1, 1, 4, 38, 38, 21, 38, 21, 21, 38, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 3, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 29, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 0, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 28, 19, 8, 33, 37, 22, 25, 18, 38, 1, 1, 4, 38, 38, 21, 38, 21, 21, 38, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 3, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 29, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 0, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 28, 19, 8, 37, 22, 25, 18, 38, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 28, 19, 8, 37, 22, 25, 18, 38, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 19, 28, 8, 37, 22, 25, 18, 38, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 11, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 0, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 19, 28, 8, 37, 22, 25, 18, 38, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 11, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 0, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 38, 19, 8, 37, 22, 25, 18, 28, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 38, 19, 8, 37, 22, 25, 18, 28, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 19, 38, 8, 37, 22, 25, 18, 28, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 19, 38, 8, 37, 22, 25, 18, 28, 1, 1, 4, 38, 38, 21, 38, 21, 21, 38, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 37, 8, 19, 38, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 37, 8, 19, 38, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 19, 38, 8, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 33, 38, 19, 8, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 19, 33, 8, 37, 22, 25, 0, 28, 1, 1, 4, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 28, 8, 33, 22, 25, 18, 39, 1, 1, 4, 38, 38, 0, 38, 21, 21, 21, 38, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 28, 8, 33, 22, 25, 18, 39, 1, 1, 4, 38, 38, 0, 38, 21, 21, 21, 38, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 33, 8, 37, 22, 25, 18, 39, 1, 1, 4, 38, 38, 0, 38, 21, 21, 21, 38, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 19, 8, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 19, 37, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 19, 37, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 37, 8, 33, 22, 25, 18, 19, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 36, 0, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 12, 0, 0, 9, 20, 9, 30, 0, 0, 35, 0, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 33, 8, 37, 22, 25, 18, 19, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 36, 0, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 12, 0, 0, 9, 20, 9, 30, 0, 0, 35, 0, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 28, 33, 37, 22, 25, 18, 19, 1, 1, 38, 38, 38, 4, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 12, 0, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 19, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 19, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 19, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 28, 33, 37, 22, 25, 18, 19, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 19, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 16, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 33, 8, 37, 22, 25, 18, 16, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 33, 8, 37, 22, 25, 18, 16, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 16, 0, 0, 3, 26, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 28, 8, 33, 22, 25, 18, 16, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 0, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 28, 33, 37, 22, 25, 18, 16, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 33, 8, 37, 22, 25, 18, 16, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 33, 8, 37, 22, 25, 18, 16, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 33, 8, 37, 22, 25, 18, 16, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 39, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 28, 33, 8, 37, 22, 25, 18, 16, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 39, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 16, 8, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 4, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 0, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 16, 8, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 4, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 0, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 33, 8, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 15, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 0, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 8, 16, 37, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 4, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 0, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 33, 8, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 33, 8, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 8, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 33, 8, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 9, 4, 42, 20, 30, 12, 9, 12, 19, 0, 42, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 33, 28, 37, 22, 25, 18, 36, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 16, 28, 33, 22, 25, 18, 36, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 28, 33, 37, 22, 25, 18, 36, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 28, 33, 37, 22, 25, 18, 36, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 28, 33, 37, 22, 25, 18, 36, 1, 1, 21, 38, 38, 0, 38, 38, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 33, 16, 36, 37, 22, 25, 18, 28, 1, 1, 21, 38, 38, 4, 38, 21, 21, 38, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 0, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 16, 36, 37, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 0, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 16, 36, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 33, 16, 36, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 37, 16, 36, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 31, 38, 33, 16, 36, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 33, 31, 8, 37, 22, 25, 18, 28, 1, 1, 21, 38, 38, 4, 38, 38, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 19, 36, 7, 26, 0, 0, 3, 0, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 16, 42, 20, 30, 12, 9, 30, 0, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 21, 38, 0, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 20, 10, 17, 42, 4, 42, 10, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 31, 33, 37, 22, 25, 18, 28, 1, 1, 0, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 37, 31, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 37, 31, 33, 22, 25, 18, 28, 1, 1, 0, 38, 38, 38, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 37, 31, 33, 22, 25, 18, 36, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 28, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 8, 33, 31, 37, 22, 25, 18, 36, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 28, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 36, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 36, 31, 37, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 0, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 36, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 0, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 36, 31, 37, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 0, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 6, 14, 0, 0, 14, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 27, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 39, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 27, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 39, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 27, 31, 33, 37, 22, 25, 18, 28, 1, 1, 38, 38, 38, 39, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 12, 19, 0, 9, 20, 9, 30, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 27, 37, 31, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 27, 37, 31, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 38, 21, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 27, 37, 31, 33, 22, 25, 18, 28, 1, 1, 38, 38, 38, 0, 21, 21, 38, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 37, 31, 36, 33, 22, 25, 18, 27, 1, 1, 38, 38, 38, 28, 38, 0, 21, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 6, 24, 0, 15, 15, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 39, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 31, 37, 27, 33, 22, 25, 18, 15, 1, 1, 38, 38, 38, 39, 38, 0, 21, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 0, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 28, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 31, 37, 27, 33, 22, 25, 18, 15, 1, 1, 38, 38, 38, 39, 38, 0, 21, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 0, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 28, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 37, 31, 27, 33, 22, 25, 18, 15, 1, 1, 38, 38, 38, 39, 38, 0, 21, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 0, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 28, 9, 20, 9, 12, 0, 0, 35, 36, 29, 13, 41, 41, 34, 15, 11, 13, 0, 8, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 33, 31, 36, 37, 22, 25, 18, 27, 1, 1, 38, 38, 38, 0, 38, 15, 21, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 6, 24, 0, 15, 28, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 27, 31, 36, 37, 22, 25, 18, 33, 1, 1, 38, 38, 38, 0, 38, 15, 21, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 6, 24, 0, 15, 0, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 28, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 27, 31, 36, 37, 22, 25, 18, 33, 1, 1, 38, 38, 38, 0, 38, 15, 21, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 6, 24, 0, 15, 0, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 10, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 28, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 36, 31, 37, 33, 22, 25, 18, 28, 1, 1, 10, 38, 38, 39, 38, 38, 21, 21, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 13, 0, 0, 27, 27, 6, 24, 0, 15, 15, 2, 6, 36, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 0, 21, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 27, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 15, 31, 27, 33, 22, 25, 18, 37, 1, 1, 27, 38, 38, 10, 38, 0, 36, 21, 21, 38, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 0, 0, 15, 28, 2, 6, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 21, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 15, 31, 27, 33, 22, 25, 18, 37, 1, 1, 27, 38, 38, 10, 38, 0, 36, 21, 21, 38, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 0, 0, 15, 28, 2, 6, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 21, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 15, 31, 27, 33, 22, 25, 18, 37, 1, 1, 27, 38, 38, 10, 38, 0, 36, 21, 21, 38, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 0, 0, 15, 28, 2, 6, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 21, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 15, 31, 27, 33, 22, 25, 18, 37, 1, 1, 27, 38, 38, 10, 38, 0, 36, 21, 21, 38, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 14, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 0, 0, 15, 28, 2, 6, 0, 0, 0, 0, 36, 7, 26, 0, 0, 0, 16, 5, 0, 0, 0, 36, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 21, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 15, 31, 27, 33, 22, 25, 18, 37, 27, 1, 36, 38, 38, 38, 38, 10, 36, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 28, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 1, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 21, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 15, 31, 27, 33, 22, 25, 18, 37, 27, 1, 36, 38, 38, 38, 38, 10, 36, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 28, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 1, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 21, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int),
np.array([0, 0, 0, 0, 16, 38, 15, 31, 27, 33, 22, 25, 18, 37, 27, 1, 36, 38, 38, 38, 38, 10, 36, 21, 21, 0, 38, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 6, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 6, 24, 0, 15, 28, 2, 0, 0, 0, 0, 0, 36, 7, 26, 0, 0, 3, 16, 5, 0, 0, 0, 1, 7, 0, 0, 5, 36, 0, 0, 0, 11, 30, 16, 17, 36, 21, 10, 17, 42, 4, 42, 20, 30, 12, 9, 30, 19, 0, 9, 20, 9, 12, 0, 0, 35, 8, 29, 13, 41, 41, 34, 15, 11, 13, 0, 0, 23, 32, 32, 40]
, dtype=int)
                    ]

# --- PREPROCESSING ---
NUM_SLOTS = slot_assignment[0].shape[0]
Vm = np.full(NUM_SLOTS, 3)  # Max volume per slot

# ----------------------------
# Derived helpers
# ----------------------------
slot_to_rack = np.argmax(Sr, axis=1).tolist()
# Prohibited slots (first 4 slots are start/discharge)
PROHIBITED_SLOT_INDICES = list(range(4))
DISCHARGE_RACKS = sorted(set(slot_to_rack[s] for s in PROHIBITED_SLOT_INDICES))

# Build VU map: SKU id (1-based) -> unit volume
VU_map = {i+1: float(VU_array[i]) for i in range(len(VU_array))}

# ----------------------------
# HV utilities (2D minimization)
# ----------------------------
def is_dominated(p, q):
    return (q[0] <= p[0] and q[1] <= p[1]) and (q[0] < p[0] or q[1] < p[1])

def filter_nondominated(points):
    pts = np.array(points, dtype=float)
    if pts.size == 0:
        return pts.reshape(0, 2)
    n = pts.shape[0]
    keep = np.ones(n, dtype=bool)
    for i in range(n):
        if not keep[i]:
            continue
        for j in range(n):
            if i == j or not keep[j]:
                continue
            if is_dominated(pts[i], pts[j]):
                keep[i] = False
                break
            if is_dominated(pts[j], pts[i]):
                keep[j] = False
    return pts[keep]

def hv_2d_min(points, ref):
    pts = np.array(points, dtype=float)
    if pts.size == 0:
        return 0.0
    ref = np.array(ref, dtype=float)
    pts = pts[np.all(pts <= ref, axis=1)]
    if pts.size == 0:
        return 0.0
    pts = pts.reshape(-1, 2)
    pts = pts[np.argsort(pts[:, 0])]
    hv = 0.0
    prev_f2 = ref[1]
    ref_f1 = ref[0]
    for x1, x2 in pts:
        if x2 < prev_f2:
            width = max(0.0, ref_f1 - x1)
            height = max(0.0, prev_f2 - x2)
            hv += width * height
            prev_f2 = x2
    return hv

def make_ref_point_from_fronts(fronts, factor=1.2, require_nondominated=True):
    valid_fronts = [np.array(f, dtype=float) for f in fronts if len(f) > 0]
    if not valid_fronts:
        raise ValueError("No fronts to build ref_point.")
    all_pts = np.vstack(valid_fronts)
    if require_nondominated:
        all_pts = filter_nondominated(all_pts)
    if all_pts.size == 0:
        raise ValueError("No valid points for ref_point.")
    return factor * np.max(all_pts, axis=0)

# ----------------------------
# Picking / genome logic
# ----------------------------
def capacity_of_slot(slot_idx, Vm_array, sku_id):
    if sku_id == 0:
        return 0
    Vm_slot = Vm_array[slot_idx] if hasattr(Vm_array, "__len__") else Vm_array
    unit_vol = VU_map.get(sku_id, 0.0)
    if unit_vol <= 0:
        return 0
    return int(Vm_slot // unit_vol)

def route_for_order(order, slot_assignment_row, Vm_array_local, slot_to_rack_local, start_rack):
    Vm_local = Vm_array_local.copy() if hasattr(Vm_array_local, "__len__") else np.array([Vm_array_local]*len(slot_assignment_row))
    route = [start_rack]
    indices = np.where(order > 0)[0]
    demandas = order[order > 0].astype(int)
    remaining = {int(idx+1): int(q) for idx, q in zip(indices, demandas)}
    racks_needed = set()

    for sku_id, qty in remaining.items():
        need = qty
        for slot_idx, slot_sku in enumerate(slot_assignment_row):
            if int(slot_sku) != sku_id:
                continue
            if slot_idx in PROHIBITED_SLOT_INDICES:
                continue
            unit_vol = VU_map.get(sku_id, 0.0)
            if unit_vol <= 0:
                continue
            cap = int(Vm_local[slot_idx] // unit_vol)
            if cap <= 0:
                continue
            take = min(need, cap)
            Vm_local[slot_idx] -= take * unit_vol
            if take > 0:
                racks_needed.add(slot_to_rack_local[slot_idx])
                need -= take
                if need <= 0:
                    break
        # if still need >0, demand cannot be fully satisfied by this slot_assignment row
        # will be penalized later

    # greedy nearest-first order visiting racks_needed
    racks_needed = list(racks_needed)
    current = start_rack
    route_list = []
    while racks_needed:
        next_rack = min(racks_needed, key=lambda r: D_racks[current, r])
        route_list.append(next_rack)
        current = next_rack
        racks_needed.remove(next_rack)
    route += route_list + [start_rack]
    return route

def build_genome(orders, slot_assignment_row, Vm_array_local, slot_to_rack_local, start_rack, cluster_idx):
    genome = [cluster_idx, 0]
    for order in orders:
        sub = route_for_order(order, slot_assignment_row, Vm_array_local, slot_to_rack_local, start_rack)
        genome += sub[1:]  # skip leading start_rack  to avoid duplicate zeros; we use 0 as order separator but routes use rack indices
    return genome

def insert_discharge_points_and_boxes(genome, slot_assignments, slot_to_rack_local,
                                      box_volume_max, start_rack, orders):
    cluster_idx = genome[0]
    slot_assignment_row = slot_assignments[cluster_idx]
    new_genome = [cluster_idx, 0]
    i = 2
    order_idx = 0
    current_rack = start_rack
    box_vol = 0.0
    orders_arr = np.array(orders)
    order_demands = [dict((int(sku)+1, int(qty)) for sku, qty in enumerate(order) if qty > 0) for order in orders_arr]
    num_orders = len(order_demands)

    while i < len(genome):
        rack = genome[i]
        if rack == 0:
            # before closing order, insert nearest discharge if last wasn't discharge
            if new_genome[-1] not in DISCHARGE_RACKS:
                nearest_discharge = min(DISCHARGE_RACKS, key=lambda dp: D_racks[current_rack, dp])
                new_genome.append(nearest_discharge)
                current_rack = nearest_discharge
                box_vol = 0.0
            new_genome.append(0)
            order_idx += 1
            current_rack = start_rack
            box_vol = 0.0
            i += 1
            continue

        new_genome.append(rack)
        current_rack = rack

        if order_idx < num_orders:
            demand = order_demands[order_idx]
            # simulate picks at this rack: scan slots that belong to this rack
            for slot_idx, sku in enumerate(slot_assignment_row):
                if slot_to_rack_local[slot_idx] != rack:
                    continue
                sku_id = int(sku)
                if sku_id == 0:
                    continue
                if sku_id not in demand or demand[sku_id] <= 0:
                    continue
                qty_to_pick = demand[sku_id]
                unit_vol = VU_map.get(sku_id, 0.0)
                for _ in range(qty_to_pick):
                    if box_vol + unit_vol > box_volume_max:
                        nearest_discharge = min(DISCHARGE_RACKS, key=lambda dp: D_racks[current_rack, dp])
                        new_genome.append(nearest_discharge)
                        current_rack = nearest_discharge
                        box_vol = 0.0
                    box_vol += unit_vol
                demand[sku_id] = 0
        i += 1

    # clean duplicates
    filtered = [new_genome[0], new_genome[1]]
    for j in range(2, len(new_genome)):
        if new_genome[j] in DISCHARGE_RACKS and filtered[-1] == new_genome[j]:
            continue
        filtered.append(new_genome[j])
    return filtered

def most_demanded_sku_distance(genome, slot_assignments, slot_to_rack_local, orders, start_rack=0, top_k=5):
    cluster_idx = genome[0]
    slot_assignment_row = slot_assignments[cluster_idx]
    sku_demands = np.sum(orders, axis=0)
    nonzero = np.where(sku_demands > 0)[0]
    top = nonzero[np.argsort(sku_demands[nonzero])[::-1][:top_k]]
    total = 0.0
    for sku_idx in top:
        sku_id = int(sku_idx) + 1
        slots = [i for i, s in enumerate(slot_assignment_row) if int(s) == sku_id]
        for slot in slots:
            rack = slot_to_rack_local[slot]
            total += D_racks[start_rack, rack]
    return total

def evaluate_individual(genome, slot_assignments, slot_to_rack_local, box_volume_max, start_rack, orders, Vm_array_local):
    augmented = insert_discharge_points_and_boxes(genome, slot_assignments, slot_to_rack_local, box_volume_max, start_rack, orders)
    total_distance = 0.0
    current = start_rack
    i = 2
    rutas_por_pedido = []
    ruta_actual = [start_rack]
    orders_arr = np.array(orders)
    order_demands_initial = [dict((int(sku)+1, int(qty)) for sku, qty in enumerate(order) if qty > 0) for order in orders_arr]
    order_demands = [d.copy() for d in order_demands_initial]
    order_idx = 0

    while i < len(augmented):
        rack = augmented[i]
        if rack == 0:
            if current != start_rack:
                total_distance += D_racks[current, start_rack]
                current = start_rack
                ruta_actual.append(start_rack)
            rutas_por_pedido.append(ruta_actual[:])
            ruta_actual = [start_rack]
            order_idx += 1
            i += 1
            continue
        total_distance += D_racks[current, rack]
        current = rack
        ruta_actual.append(rack)
        if order_idx < len(order_demands):
            demand = order_demands[order_idx]
            for slot_idx, sku in enumerate(slot_assignments[genome[0]]):
                if slot_to_rack_local[slot_idx] != rack:
                    continue
                sku_id = int(sku)
                if sku_id == 0:
                    continue
                if sku_id in demand and demand[sku_id] > 0:
                    cap = capacity_of_slot(slot_idx, Vm_array_local, sku_id)
                    take = min(demand[sku_id], cap)
                    demand[sku_id] -= take
        i += 1

    if ruta_actual != [start_rack]:
        rutas_por_pedido.append(ruta_actual[:])

    penalized = False
    for d in order_demands:
        for qty in d.values():
            if qty > 0:
                penalized = True
                total_distance += 1e6
                break
        if penalized:
            break

    sku_dist = most_demanded_sku_distance(genome, slot_assignments, slot_to_rack_local, orders, start_rack)
    return float(total_distance), float(sku_dist), penalized, rutas_por_pedido, augmented

# ----------------------------
# Genetic operators for route-genomes
# ----------------------------
def order_crossover(parent1, parent2, px):
    if random.random() > px:
        chosen = random.choice([parent1, parent2])
        return {'genome': chosen['genome'][:], 'cluster_idx': chosen['cluster_idx']}
    g1, g2 = parent1['genome'], parent2['genome']
    if g1[0] != g2[0]:
        chosen = random.choice([parent1, parent2])
        return {'genome': chosen['genome'][:], 'cluster_idx': chosen['cluster_idx']}

    def split_orders(genome):
        orders, cur = [], []
        for gene in genome[1:]:
            if gene == 0:
                orders.append(cur)
                cur = []
            else:
                cur.append(gene)
        return orders

    orders1 = split_orders(g1)
    orders2 = split_orders(g2)
    if len(orders1) != len(orders2):
        chosen = random.choice([parent1, parent2])
        return {'genome': chosen['genome'][:], 'cluster_idx': chosen['cluster_idx']}

    child_orders = []
    for o1, o2 in zip(orders1, orders2):
        combined = list(dict.fromkeys(o1 + o2))
        random.shuffle(combined)
        child_orders.append(combined)
    new_genome = [g1[0], 0]
    for o in child_orders:
        new_genome += o + [0]
    return {'genome': new_genome, 'cluster_idx': g1[0]}

def swap_mutation(individual, pm):
    g = individual['genome'][:]
    zeros = [i for i, v in enumerate(g) if v == 0]
    for j in range(len(zeros)-1):
        start, end = zeros[j], zeros[j+1]
        if end - start > 2 and random.random() < pm:
            i1 = random.randint(start+1, end-2)
            i2 = random.randint(i1+1, end-1)
            g[i1], g[i2] = g[i2], g[i1]
    return {'genome': g, 'cluster_idx': individual['cluster_idx']}

# ----------------------------
# Non-dominated sort & crowding
# ----------------------------
def dominates_obj(p, q):
    return all(p_i <= q_i for p_i, q_i in zip(p, q)) and any(p_i < q_i for p_i, q_i in zip(p, q))

def fast_non_dominated_sort(objectives):
    pop_size = len(objectives)
    S = [[] for _ in range(pop_size)]
    n = [0] * pop_size
    fronts = [[]]
    for p in range(pop_size):
        for q in range(pop_size):
            if p == q: continue
            if dominates_obj(objectives[p], objectives[q]):
                S[p].append(q)
            elif dominates_obj(objectives[q], objectives[p]):
                n[p] += 1
        if n[p] == 0:
            fronts[0].append(p)
    i = 0
    while fronts[i]:
        next_front = []
        for p in fronts[i]:
            for q in S[p]:
                n[q] -= 1
                if n[q] == 0:
                    next_front.append(q)
        i += 1
        fronts.append(next_front)
    fronts.pop()
    return fronts

def crowding_distance(front, objectives):
    distances = {i: 0.0 for i in front}
    if len(front) == 0:
        return distances
    n_obj = len(objectives[0])
    for m in range(n_obj):
        sorted_front = sorted(front, key=lambda i: objectives[i][m])
        distances[sorted_front[0]] = float('inf')
        distances[sorted_front[-1]] = float('inf')
        f_min = objectives[sorted_front[0]][m]
        f_max = objectives[sorted_front[-1]][m]
        if f_max == f_min:
            continue
        for k in range(1, len(sorted_front)-1):
            prev_val = objectives[sorted_front[k-1]][m]
            next_val = objectives[sorted_front[k+1]][m]
            distances[sorted_front[k]] += (next_val - prev_val) / (f_max - f_min)
    return distances

# ----------------------------
# NSGA-II loop - stores full individuals and original indices
# ----------------------------
def nsga2_picking_loop(orders, slot_assignment_list, Vm_array, VU_array,
                       DISCHARGE_RACKS_input, slot_to_rack_local, D_racks_array,
                       pop_size, n_gen, px, pm,
                       box_volume_max=1.0, start_rack=0, seed=None, verbose=True):
    if seed is not None:
        random.seed(seed)
        np.random.seed(seed)

    # localize globals used by helper functions
    global D_racks, VU_map, slot_to_rack, DISCHARGE_RACKS
    D_racks = D_racks_array
    slot_to_rack = slot_to_rack_local
    DISCHARGE_RACKS = DISCHARGE_RACKS_input
    VU_map = {i+1: float(VU_array[i]) for i in range(len(VU_array))}

    num_clusters = len(slot_assignment_list)
    # initialize population: seed with a genome per cluster
    population = []
    for cid, srow in enumerate(slot_assignment_list):
        g = build_genome(orders, srow, Vm_array, slot_to_rack, start_rack, cid)
        population.append({'genome': g, 'cluster_idx': cid})

    # fill remaining individuals randomly
    while len(population) < pop_size:
        cid = random.randint(0, num_clusters-1)
        srow = slot_assignment_list[cid]
        genome = [cid, 0]
        for order in orders:
            Vm_local = Vm_array.copy() if hasattr(Vm_array, "__len__") else np.array([Vm_array]*len(srow))
            indices = np.where(order > 0)[0]
            remaining = {int(idx+1): int(q) for idx, q in zip(indices, order[order>0])}
            racks_needed = set()
            for sku_id, qty in remaining.items():
                need = qty
                for slot_idx, slot_sku in enumerate(srow):
                    if int(slot_sku) != sku_id:
                        continue
                    if slot_idx in PROHIBITED_SLOT_INDICES:
                        continue
                    unit_vol = VU_map.get(sku_id, 0.0)
                    cap = int(Vm_local[slot_idx] // unit_vol) if unit_vol > 0 else 0
                    if cap <= 0:
                        continue
                    take = min(need, cap)
                    Vm_local[slot_idx] -= take * unit_vol
                    if take > 0:
                        racks_needed.add(slot_to_rack_local[slot_idx])
                        need -= take
                        if need <= 0:
                            break
            racks_needed = list(racks_needed)
            random.shuffle(racks_needed)
            genome += racks_needed + [0]
        population.append({'genome': genome, 'cluster_idx': cid})

    # store per-generation pareto fronts as tuples:
    # (list_of_deepcopied_inds, list_of_fitness_tuples, list_of_original_indices, generation_number)
    pareto_generations = []

    for gen in range(n_gen):
        # evaluate population
        population_eval = []
        for idx, ind in enumerate(population):
            d, sku_dist, penalized, rutas, aug = evaluate_individual(ind['genome'], slot_assignment_list, slot_to_rack,
                                                                    box_volume_max, start_rack, orders, Vm_array)
            population_eval.append((d, sku_dist, penalized, rutas, aug))
        population_obj = [(d, sku_dist, penalized) for (d, sku_dist, penalized, _, _) in population_eval]
        # attach objectives
        for idx, ind in enumerate(population):
            ind['objectives'] = population_obj[idx]

        # compute Pareto fronts for this population
        fronts = fast_non_dominated_sort([ind['objectives'] for ind in population])
        front0 = fronts[0] if fronts else []
        pareto_inds = []
        pareto_fitness = []
        pareto_indices = []
        for i in front0:
            if i < len(population):
                pareto_inds.append(copy.deepcopy(population[i]))
                f = population[i]['objectives']
                pareto_fitness.append((float(f[0]), float(f[1])))
                pareto_indices.append(i)  # original index in this population
        if pareto_fitness:
            pareto_generations.append((pareto_inds, pareto_fitness, pareto_indices, gen))
        if verbose and (gen % max(1, n_gen//10) == 0):
            print(f"[gen {gen}] population={len(population)} pareto_size={len(pareto_fitness)}")

        # generate offspring
        offspring = []
        while len(offspring) < pop_size:
            a, b = random.sample(range(len(population)), 2)
            pa, pb = population[a], population[b]
            oa, ob = pa['objectives'], pb['objectives']
            if dominates_obj(oa, ob):
                parent1 = pa
            elif dominates_obj(ob, oa):
                parent1 = pb
            else:
                parent1 = random.choice([pa, pb])
            c, d_idx = random.sample(range(len(population)), 2)
            pc, pd = population[c], population[d_idx]
            oc, od = pc['objectives'], pd['objectives']
            if dominates_obj(oc, od):
                parent2 = pc
            elif dominates_obj(od, oc):
                parent2 = pd
            else:
                parent2 = random.choice([pc, pd])

            if parent1['cluster_idx'] == parent2['cluster_idx']:
                ch1 = order_crossover(parent1, parent2, px)
                ch2 = order_crossover(parent2, parent1, px)
            else:
                ch1 = swap_mutation(parent1, pm)
                ch2 = swap_mutation(parent2, pm)
            offspring.append(swap_mutation(ch1, pm))
            if len(offspring) < pop_size:
                offspring.append(swap_mutation(ch2, pm))

        # evaluate offspring & attach objectives
        offspring_eval = []
        for ind in offspring:
            d, sku_dist, penalized, rutas, aug = evaluate_individual(ind['genome'], slot_assignment_list, slot_to_rack,
                                                                    box_volume_max, start_rack, orders, Vm_array)
            offspring_eval.append((d, sku_dist, penalized, rutas, aug))
        for idx, ind in enumerate(offspring):
            ind['objectives'] = (offspring_eval[idx][0], offspring_eval[idx][1], offspring_eval[idx][2])

        # combine and select new population
        combined = population + offspring
        objectives = [ind['objectives'] for ind in combined]
        fronts_combined = fast_non_dominated_sort(objectives)
        new_pop = []
        for front in fronts_combined:
            if len(new_pop) + len(front) <= pop_size:
                new_pop.extend([combined[i] for i in front])
            else:
                distances = crowding_distance(front, objectives)
                sorted_front = sorted(front, key=lambda i: distances[i], reverse=True)
                remaining = pop_size - len(new_pop)
                new_pop.extend([combined[i] for i in sorted_front[:remaining]])
                break
        population = new_pop

    # after all generations, pick best generation front by HV
    if not pareto_generations:
        if verbose:
            print("No Pareto fronts were collected during the run.")
        return population, None, None

    all_fitness_lists = [pf for (_, pf, _, _) in pareto_generations if len(pf) > 0]
    try:
        ref_point = make_ref_point_from_fronts(all_fitness_lists, factor=1.2, require_nondominated=True)
    except Exception:
        all_pts = np.vstack([np.array(f) for f in all_fitness_lists])
        ref_point = 1.2 * np.max(all_pts, axis=0)

    hv_values = []
    for inds, fitnesses, indices, gnum in pareto_generations:
        F = np.array(fitnesses, dtype=float)
        if F.size == 0:
            hv_values.append(0.0)
            continue
        F_nd = filter_nondominated(F)
        F_nd = F_nd[np.all(F_nd <= ref_point, axis=1)]
        hv_values.append(hv_2d_min(F_nd, ref_point))

    hv_values = np.array(hv_values, dtype=float)
    best_gen_idx = int(np.nanargmax(hv_values)) if hv_values.size > 0 else 0
    best_hv = float(hv_values[best_gen_idx]) if hv_values.size > 0 else 0.0
    best_inds, best_fitnesses, best_indices, best_gen_number = pareto_generations[best_gen_idx]

    if verbose:
      print(f"\nMejor frente encontrado: generación: {best_gen_number}")
      print(f"\n✅ Hipervolumen: {best_hv:.6f}")

    # Print all individuals in best front along with stored original index, fitness and augmented genome
    for j, (ind, fit, orig_idx) in enumerate(zip(best_inds, best_fitnesses, best_indices)):
        d, sku_dist, penalized, rutas, augmented = evaluate_individual(ind['genome'], slot_assignment_list, slot_to_rack,
                                                                       box_volume_max, start_rack, orders, Vm_array)
        print(f"\nBest front sol #{j} (original_index_in_population={orig_idx}, stored_generation={best_gen_number}):")
        print(f"  fitness: f1={fit[0]:.6f}, f2={fit[1]:.6f}, penalized={penalized}")
        print(f"  cluster_idx: {ind['cluster_idx']}")
        print(f"  augmented genome (with discharge rack visits): {augmented}")
        print("  routes per order:")
        for pid, r in enumerate(rutas, start=1):
            print(f"    Order {pid}: {' -> '.join(map(str, r))}")

    # Plot best Pareto front with blue points only and no labels on the plot
    try:
        f1_vals = [f[0] for f in best_fitnesses]
        f2_vals = [f[1] for f in best_fitnesses]
        plt.figure(figsize=(7,5))
        plt.scatter(f1_vals, f2_vals, c='blue', s=60)  # blue points, no labels
        plt.xlabel("f1 (total distance)")
        plt.ylabel("f2 (distance to top SKUs)")
        plt.title(f"Best Pareto front (stored generation {best_gen_number})")
        plt.grid(True)
        plt.show()
    except Exception as e:
        print("Plot failed:", e)

    return population, best_inds, best_fitnesses

# ----------------------------
# Run example (main)
# ----------------------------
if __name__ == "__main__":
    pop_size = 50
    n_gen = 500
    px = 0.8
    pm = 0.95
    box_volume_max = 1.0
    start_rack = 0

    print("Running NSGA-II picking loop...")
    final_pop, best_front_individuals, best_front_fitnesses = nsga2_picking_loop(
        orders=D,
        slot_assignment_list=slot_assignment,
        Vm_array=Vm,
        VU_array=VU_array,
        DISCHARGE_RACKS_input=DISCHARGE_RACKS,
        slot_to_rack_local=slot_to_rack,
        D_racks_array=D_racks,
        pop_size=pop_size,
        n_gen=n_gen,
        px=px,
        pm=pm,
        box_volume_max=box_volume_max,
        start_rack=start_rack,
        seed=None,
        verbose=True
    )

    print("\nNSGA-II run completed.")
    if best_front_individuals is None:
        print("No Pareto front returned.")
    else:
        print(f"Returned best Pareto front size: {len(best_front_individuals)}")